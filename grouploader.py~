# -*- coding: utf-8 -*-

#!/usr/bin/env python

import webapp2
import json,math,sys,pprint,os
import jinja2
from google.appengine.ext import ndb
from google.appengine.api.memcache import Client
from google.appengine.api import urlfetch
from passlib.hash import sha256_crypt


JINJA_ENVIRONMENT = jinja2.Environment(
                                       loader=jinja2.FileSystemLoader(os.path.dirname(__file__)),
                                       extensions=['jinja2.ext.autoescape'])

class Group(ndb.Model):
    nrealm = ndb.StringProperty(indexed=True)
    ngroup = ndb.StringProperty(indexed=True)
    groupname = ndb.StringProperty()
    toons = ndb.StringProperty(repeated=True)
    password = ndb.StringProperty()

    @staticmethod
    def normalize(realm):
        return realm.lower().replace('\'','').replace(' ','-')

class Realm(ndb.Model):
    realm = ndb.StringProperty(indexed=True,required=True)
    slug = ndb.StringProperty(indexed=True,required=True)

class Loader(webapp2.RequestHandler):
    def get(self, nrealm, ngroup):
        print 'Loader.get'
        # try to load the group info from the database
        db_query = Group.query(Group.nrealm==nrealm, Group.ngroup==ngroup)
        results = db_query.fetch(5)
        
        # if the group doesn't exist, drop into the interface to make a new
        # group
        if (len(results) == 0):
            self.redirect('/edit/%s/%s' % (nrealm, ngroup))
        
        # if the group exists, load the group from the blizzard API and
        # display it.
        # if the group doesn't exist, show the page to create a new
        # group.
        else:
            self.loadGroup(results[0])

    def post(self, nrealm, ngroup):
        
        print 'Loader.post'
        # try to load the group info from the database
        db_query = Group.query(Group.nrealm==nrealm, Group.ngroup==ngroup)
        results = db_query.fetch(5)
        
        if ((len(results) != 0) and
            sha256_crypt.verify(self.request.get('pw'), results[0].password) != True):
            self.response.write('Password did not match for this group!')
            return
        
        group = None
        if (len(results) != 0):
            group = results[0]
        else:
            group = Group()
        
        group.nrealm = nrealm
        group.ngroup = ngroup
        group.groupname = self.request.get('group').strip()
        group.password = sha256_crypt.encrypt(self.request.get('pw'))
        toons = self.request.POST.getall('toons')
        print 'number of toons saved: %d' % len(toons)
        group.toons = sorted(self.request.POST.getall('toons'), key=unicode.lower)
        group.put()

        self.loadGroup(group)

    def loadGroup(self, results):

        # Get the group data from the results
        toons = results.toons
        realm = results.nrealm
        
        # Query ndb for the full realm name based on the results
        rq = Realm.query(Realm.slug == realm, namespace='Realms')
        rqres = rq.fetch()
        frealm = rqres[0].realm

        jsondata = dict()
        
        totalilvl = 0
        totalilvleq = 0
        
        for i in range(len(toons)):
            url = 'http://us.battle.net/api/wow/character/%s/%s?fields=items,guild,professions,progression' % (realm, toons[i]);
            response = urlfetch.fetch(url)
            jsondata[i] = json.loads(response.content)
            
            if 'status' in jsondata[i] and jsondata[i]['status'] == 'nok':
                print('Failed to find toon %s' % toons[i].encode('utf-8'))
                jsondata[i]['toon'] = toons[i]
            else:
                totalilvl = totalilvl + jsondata[i]['items']['averageItemLevel'];
                totalilvleq = totalilvleq + jsondata[i]['items']['averageItemLevelEquipped']
    
        halfindex = math.ceil(len(jsondata) / 2.0)

        # throw them at jinja to generate the actual html
        template_values = {
            'group' : results.groupname,
            'frealm' : frealm,
            'ngroup' : results.ngroup,
            'nrealm' : results.nrealm,
            'groupavgilvl' : totalilvl / len(toons),
            'groupavgeqp' : totalilvleq / len(toons),
        }
        template = JINJA_ENVIRONMENT.get_template('groupinfo-header.html')
        self.response.write(template.render(template_values))

        self.response.write('<div class="left">\n')

        for u in range(len(jsondata)):
                    
            char = jsondata[u]
                    
            if (u == halfgroup):
                self.response.write('</div>')
                self.response.write('<div class="right">\n')
            
            if 'status' in char and char['status'] == 'nok':
                template_values = {
                    'name' : char['toon'],
                    'avgilvl' : 0
                }
            else
                
                items = char['items']
                template_values = {
                    'name' : char['name'],
                    'guild' : char['guild'],
                    'avgilvl' : char['items']['averageItemLevel']
                    'avgilvle' : char['items']['averageItemLevelEquipped']
                    'head' : char['items']['head']['itemLevel'] if head in char['items'] else None,
                    'neck' : char['items']['head']['itemLevel'] if head in char['items'] else None,
                    'shoulder' : char['items']['head']['itemLevel'] if head in char['items'] else None,
                    'back' : char['items']['head']['itemLevel'] if head in char['items'] else None,
                    'chest' : char['items']['head']['itemLevel'] if head in char['items'] else None,
                    'wrist' : char['items']['head']['itemLevel'] if head in char['items'] else None,
                    'hands' : char['items']['head']['itemLevel'] if head in char['items'] else None,
                    'waist' : char['items']['head']['itemLevel'] if head in char['items'] else None,
                    'legs' : char['items']['head']['itemLevel'] if head in char['items'] else None,
                    'feet' : char['items']['head']['itemLevel'] if head in char['items'] else None,
                    'finger1' : char['items']['head']['itemLevel'] if head in char['items'] else None,
                    'finger2' : char['items']['head']['itemLevel'] if head in char['items'] else None,
                    'trinket1' : char['items']['head']['itemLevel'] if head in char['items'] else None,
                    'trinket2' : char['items']['head']['itemLevel'] if head in char['items'] else None,
                    'mainHand' : char['items']['head']['itemLevel'] if head in char['items'] else None,
                }

#        priprof = char['professions']['primary']
#
#        if (len(priprof) == 2):
#            self.response.write('Profession #1: %s (%d)<br/>\n' % (priprof[0]['name'], priprof[0]['rank']))
#            self.response.write('Profession #2: %s (%d)<br/>\n' % (priprof[1]['name'], priprof[1]['rank']))
#        elif (len(priprof) == 1):
#            self.response.write('Profession #1: %s (%d)<br/>\n' % (priprof[0]['name'], priprof[0]['rank']))
#            self.response.write('Profession #2: none<br/>\n')
#        else:
#            self.response.write('Profession #1: none<br/>\n')
#            self.response.write('Profession #2: none<br/>\n')
        self.response.write('</div><p/>\n');
        self.response.write('</body>\n</html>')

class Editor(webapp2.RequestHandler):
    def get(self, nrealm, ngroup):
        self.editGroup(nrealm, ngroup)
    
    def editGroup(self, nrealm, ngroup):
        
        # try to load the group info from the database
        db_query = Group.query(Group.nrealm==nrealm, Group.ngroup==ngroup)
        queryresults = db_query.fetch(5)
        
        results = None
        if (len(queryresults) != 0):
            results = queryresults[0]
        
        # throw them at jinja to generate the actual html
        template_values = {
            'group' : ngroup,
            'realm' : nrealm,
            'results' : results,
        }
        template = JINJA_ENVIRONMENT.get_template('editor.html')
        self.response.write(template.render(template_values))
